{"name":"Angular-growl-2","tagline":"growl-like notifications for angularJS projects","body":"#angular-growl-2\r\nGrowl like notifications for angularJS projects, using bootstrap alert classes, originally developed by Marco Rinck\r\n\r\n##Features\r\n\r\n![Standard bootstrap 2.x styles](doc/screenshot.jpg)\r\n\r\n* growl like notifications like in MacOS X\r\n* using standard bootstrap classes (alert, alert-info, alert-error, alert-success)\r\n* global or per message configuration of a timeout when message will be automatically closed\r\n* automatic translation of messages if [angular-translate](https://github.com/PascalPrecht/angular-translate) filter is\r\npresent, you only have to provide keys as messages, angular-translate will translate them\r\n* pre-defined $http-Interceptor to automatically handle $http responses for server-sent messages\r\n* automatic CSS animations when adding/closing notifications (only when using >= angularJS 1.2)\r\n* < 1 kB after GZIP\r\n* Allows for HTML content inside the alert\r\n\r\n##Installation\r\n\r\nYou can install angular-growl-v2 with bower:\r\n\r\n> bower install angular-growl-v2\r\n\r\nAlternatively you can download the files in the [build folder](build/) manually and include them in your project.\r\n\r\n````html\r\n<html>\r\n    <head>\r\n        <link href=\"bootstrap.min.css\" rel=\"stylesheet\">\r\n        <script src=\"angular.min.js\"></script>\r\n\r\n        <link href=\"angular-growl.css\" rel=\"stylesheet\">\r\n        <script src=\"angular-growl.js\"></script>\r\n    </head>\r\n</html>\r\n````\r\n\r\nAs angular-growl is based on its own angularJS module, you have to alter your dependency list when creating your application\r\nmodule:\r\n\r\n````javascript\r\nvar app = angular.module('myApp', ['angular-growl']);\r\n````\r\n\r\nFinally, you have to include the directive somewhere in your HTML like this:\r\n\r\n````html\r\n<body>\r\n    <div growl></div>\r\n</body>\r\n````\r\n\r\n##Usage\r\n\r\nJust let angular inject the growl Factory into your code and call the 4 functions that the factory provides accordingly:\r\n\r\n````javascript\r\napp.controller(\"demoCtrl\", ['$scope', 'growl', function($scope, growl) {\r\n    $scope.addSpecialWarnMessage = function() {\r\n        growl.warning(\"This adds a warn message\");\r\n        growl.info(\"This adds a info message\");\r\n        growl.success(\"This adds a success message\");\r\n        growl.error(\"This adds a error message\");\r\n    }\r\n}]);\r\n````\r\n\r\nIf [angular-translate](https://github.com/PascalPrecht/angular-translate) is present, its filter is automatically called for translating of messages, so you have to provide\r\nonly the key:\r\n\r\n````javascript\r\napp.controller(\"demoCtrl\", ['$scope', 'growl', function($scope, growl) {\r\n    $scope.addSpecialWarnMessage = function() {\r\n        growl.success(\"SAVE_SUCCESS_MESSAGE\");\r\n        growl.error(\"VALIDATION_ERROR\");\r\n    }\r\n}]);\r\n````\r\n\r\n##Configuration\r\n\r\n###Only unique messages [default: true]\r\n\r\nAccept only unique messages as a new message. If a message is already displayed (text and severity are the same) then this\r\nmessage will not be added to the displayed message list. Set to false, to always display all messages regardless if they\r\nare already displayed or not:\r\n\r\n````javascript\r\nvar app = angular.module('myApp', ['angular-growl']);\r\n\r\napp.config(['growlProvider', function(growlProvider) {\r\n    growlProvider.onlyUniqueMessages(false);\r\n}]);\r\n````\r\n\r\n###Automatic closing of notifications (timeout, ttl) [default: none]\r\n\r\nHowever, you can configure a global timeout (TTL) after which notifications should be automatically closed.  To do this, you have to configure this during config phase of angular bootstrap like this:\r\n\r\n````javascript\r\nvar app = angular.module('myApp', ['angular-growl']);\r\n\r\napp.config(['growlProvider', function(growlProvider) {\r\n    growlProvider.globalTimeToLive(5000);\r\n}]);\r\n````\r\n\r\nThis sets a global timeout of 5 seconds after which every notification will be closed.\r\n\r\nYou can override TTL generally for every single message if you want:\r\n\r\n````javascript\r\napp.controller(\"demoCtrl\", ['$scope', 'growl', function($scope, growl) {\r\n    $scope.addSpecialWarnMessage = function() {\r\n        growl.warning(\"Override global ttl setting\", {ttl: 10000});\r\n    }\r\n}]);\r\n````\r\n\r\nThis sets a 10 second timeout, after which the notification will be automatically closed.\r\n\r\nIf you have set a global TTL, you can disable automatic closing of single notifications by setting their ttl to -1:\r\n\r\n````javascript\r\napp.controller(\"demoCtrl\", ['$scope', 'growl', function($scope, growl) {\r\n    $scope.addSpecialWarnMessage = function() {\r\n        growl.warning(\"this will not be closed automatically even when a global ttl is set\", {ttl: -1});\r\n    }\r\n}]);\r\n````\r\n\r\n###Allow HTML in messages [default: false]\r\n\r\nTurn this on to be able to display html tags in messages, default behaviour is to NOT display HTML. It uses `$sce` service from angular to mark the html as trusted.\r\n\r\n````javascript\r\nvar app = angular.module('myApp', ['angular-growl']);\r\n\r\napp.config(['growlProvider', function(growlProvider) {\r\n    growlProvider.globalEnableHtml(true);\r\n}]);\r\n````\r\n\r\nYou can override the global option and allow HTML tags in single messages too:\r\n\r\n````javascript\r\napp.controller(\"demoCtrl\", ['$scope', 'growl', function($scope, growl) {\r\n    $scope.addSpecialWarnMessage = function() {\r\n        growl.warning(\"<strong>This is a HTML message</strong>\", {enableHtml: true});\r\n    }\r\n}]);\r\n````\r\n\r\n###Disable close button on messages [default: false]\r\nTurn this on to hide the close button on messages, default behaviour is to display the close button.\r\n\r\n```javascript\r\nvar app = angular.module('myApp', ['angular-growl']);\r\n\r\napp.config(['growlProvider', function(growlProvider) {\r\n    growlProvider.globalDisableCloseButton(true);\r\n}]);\r\n```\r\n\r\nYou can override the global option and hide the close button in single messages too:\r\n \r\n ````javascript\r\n app.controller(\"demoCtrl\", ['$scope', 'growl', function($scope, growl) {\r\n     $scope.addSpecialWarnMessage = function() {\r\n         growl.warning(\"<strong>This is a message without a close button</strong>\", {disableCloseButton: true});\r\n     }\r\n }]);\r\n ````\r\n\r\n###Animations\r\n\r\nBeginning with angularJS 1.2 growl messages can be automatically animated with CSS animations when adding and/or closing them. All you have to do is load the angular-animate.js provided by angularJS and add **ngAnimate** to your applications dependency list:\r\n\r\n````html\r\n<html>\r\n    <head>\r\n        <link href=\"bootstrap.min.css\" rel=\"stylesheet\">\r\n        <script src=\"angular.min.js\"></script>\r\n        <script src=\"angular-animate.min.js\"></script>\r\n\r\n        <link href=\"angular-growl.css\" rel=\"stylesheet\">\r\n        <script src=\"angular-growl.js\"></script>\r\n    </head>\r\n</html>\r\n````\r\n\r\n````javascript\r\nvar app = angular.module('myApp', ['angular-growl', 'ngAnimate']);\r\n````\r\n\r\nThat's it. The angular-growl.css comes with a pre-defined animation of 0.5s to opacity.\r\n\r\nTo configure the animations, just change the _growl-item.*_ classes in the css file to your preference. F.i. to change length\r\nof animation from 0.5s to 1s do this:\r\n\r\n````css\r\n.growl-item.ng-enter,\r\n.growl-item.ng-leave {\r\n    -webkit-transition:1s linear all;\r\n    -moz-transition:1s linear all;\r\n    -o-transition:1s linear all;\r\n    transition:1s linear all;\r\n}\r\n````\r\n\r\nBasically you can style your animations just as you like if ngAnimate can pick it up automatically. See the [ngAnimate\r\ndocs](http://docs.angularjs.org/api/ngAnimate) for more info.\r\n\r\n###Handling of server sent notifications\r\n\r\nWhen doing $http requests, you can configure angular-growl to look automatically for messages in $http responses, so your\r\nbusiness logic on the server is able to send messages/notifications to the client and you can display them automagically:\r\n\r\n````javascript\r\nvar app = angular.module('myApp', ['angular-growl']);\r\n\r\napp.config(['growlProvider', '$httpProvider', function(growlProvider, $httpProvider) {\r\n    $httpProvider.responseInterceptors.push(growlProvider.serverMessagesInterceptor);\r\n}]);\r\n````\r\n\r\nThis adds a pre-defined angularJS HTTP interceptor that is called on every HTTP request and looks if response contains\r\nmessages. Interceptor looks in response for a \"messages\" array of objects with \"text\" and \"severity\" key. This is an example\r\nresponse which results in 3 growl messages:\r\n\r\n````json\r\n{\r\n    \"someOtherData\": {...},\r\n\t\"messages\": [\r\n\t\t{\"text\":\"this is a server message\", \"severity\": \"warn\"},\r\n\t\t{\"text\":\"this is another server message\", \"severity\": \"info\"},\r\n\t\t{\"text\":\"and another\", \"severity\": \"error\"}\r\n\t]\r\n}\r\n````\r\n\r\nYou can configure the keys, the interceptor is looking for like this:\r\n\r\n````javascript\r\nvar app = angular.module(\"demo\", [\"angular-growl\"]);\r\n\r\napp.config([\"growlProvider\", \"$httpProvider\", function(growlProvider, $httpProvider) {\r\n\tgrowlProvider.messagesKey(\"my-messages\");\r\n\tgrowlProvider.messageTextKey(\"messagetext\");\r\n\tgrowlProvider.messageSeverityKey(\"severity-level\");\r\n\t$httpProvider.responseInterceptors.push(growlProvider.serverMessagesInterceptor);\r\n}]);\r\n````\r\n\r\nServer messages will be created with default TTL.\r\n\r\n##Changelog\r\n\r\n**0.5.0** - 18 Mar 2014\r\n* Manually merged some pull requests from the original branch\r\n* Fixed bower.json file to include itself and the css file\r\n* [BREAK] changed the function names to add growl notifications to be a shorter (success, info, warning, error VS addSuccessMessage, addInfoMessage...)\r\n\r\n**0.4.0** - 19th Nov 2013\r\n\r\n* updated dependency to angularJS 1.2.x, angular-growl does not work with 1.0.x anymore (BREAKING CHANGE)\r\n* new option: only display unique messages, which is the new default, disable to allow same message more than once (BREAKING CHANGE)\r\n* new option: allow html tags in messages, default is off  you need to\r\n\r\n**0.3.1** - 1st Oct 2013\r\n\r\n* bugfix: translating of messages works again\r\n* change: also set alert css classes introduced by bootstrap 3\r\n\r\n**0.3.0** - 26th Sept 2013\r\n\r\n* adding css animations support via ngAnimate (for angularJS >= 1.2)\r\n* ability to configure server message keys\r\n\r\n**0.2.0** - 22nd Sept 2013\r\n\r\n* reworking, bugfixing and documenting handling of server sent messages/notifications\r\n* externalizing css styles of growl class\r\n* provide minified versions of js and css files in build folder\r\n\r\n**0.1.3**  - 20th Sept 2013\r\n\r\n* introducing ttl config option, fixes #2\r\n\r\n#Thanks\r\nThanks Marco Rinck for the original code, the following people have contributed to this project:\r\n\r\n* [orangeskins](https://github.com/orangeskins)\r\n* [adamalbrecht](https://github.com/adamalbrecht)\r\n* [m0ppers](https://github.com/m0ppers)\r\n* [lbehnke](https://github.com/lbehnke)\r\n* [rorymadden](https://github.com/rorymadden)\r\n\r\n# License\r\nCopyright (C) 2014 Marco Rinck\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}